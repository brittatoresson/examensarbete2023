@page "/exercise"
@using Examensarbete.Shared.Model;
@using Examensarbete.Client.Components;
@inject ExerciseService exerciseService;
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<MudPaper Class="pageContainer" Elevation="0">

    <MudGrid>

        @if (exerciseService.ExerciseList.Count < 1)
        {
            <LoadingSpinner></LoadingSpinner>
        }
        else
        {
            @foreach (var item in exerciseService.ExerciseList)
            {
                <MudItem sm="4" sx="4">
                    <MudCard Class="@(item.isActive ? "" :"activeExercise")"
                             @onclick="(() => PickExercise(item))">@item.Name</MudCard>
                        </MudItem>
                    }
        }
    </MudGrid>
    @if (pickExercise.Count > 0)
    {

        @*<MudButton @onclick="SaveExercises">Save</MudButton>*@
        <NavigationButton Url="focus" />
    }

</MudPaper>

@code {
    List<ExerciseModel> pickExercise = new();
    CreateWorkout createWorkout = new();

    protected override async Task OnInitializedAsync()
    {
        await exerciseService.GetExercises();
    }

    public async Task PickExercise(ExerciseModel exercise)
    {
        exercise.isActive = true;
        pickExercise.Add(exercise);
        SaveExercise();
    }

    public async Task SaveExercise()
    {
        WorkoutModel workout = new();
        var randomExercise = createWorkout.RandomExercise(pickExercise);
        workout.Exercise = randomExercise.Name;
        await sessionStorage.SetItemAsync("Workout", workout);
    }
}
