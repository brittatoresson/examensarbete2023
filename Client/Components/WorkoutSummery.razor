@using Examensarbete.Shared.Model;
@using Newtonsoft.Json;
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManger;
@inject HttpClient Http
@inject ExerciseService exerciseService;


<MudPaper Class="summary" Elevation="0">
    @if (!String.IsNullOrEmpty(newWorkout.Exercise))
    {
        <MudText Typo="Typo.h4">Summary</MudText>
        <ul>
            <li><MudText Typo="Typo.h6">@newWorkout.Focus</MudText></li>
            @if (newWorkout.Focus == "Interval")
            {
                <li>On: @newWorkout.IntervallOn min</li>
                <li>Rest: @newWorkout.IntervallOff min</li>
            }
            <br>
            @foreach (var item in newWorkout.Exercises)
            {
                <li>@item.exercise, @item.Repetition reps</li>
            }
            <li> @(newWorkout.Repetition > 0 ? newWorkout.Repetition +"repetitions" : "") </li>
            <br>
            <li>Time cap: @newWorkout.TotalTime min</li>
        </ul>
    }

</MudPaper>

@code {
    WorkoutModel? newWorkout = new();
    CreateWorkout createWorkout = new();

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        var focus = await sessionStorage.GetItemAsync<string>("Focus");
        var workout = await sessionStorage.GetItemAsync<string>("Workout");
        var time = await sessionStorage.GetItemAsync<int>("Time");
        newWorkout = JsonConvert.DeserializeObject<WorkoutModel>(workout);
        newWorkout.TotalTime = time;
        newWorkout.Focus = focus;
        newWorkout.Date = DateTime.Now;

        var GetRoundSRepsFocus = createWorkout.GetFocusArea(focus);
        newWorkout.Repetition = GetRoundSRepsFocus.Repetition;
        newWorkout.IntervallOff = GetRoundSRepsFocus.IntervallOff;
        newWorkout.IntervallOn = GetRoundSRepsFocus.IntervallOn;

        await sessionStorage.SetItemAsync<WorkoutModel>("Workout", newWorkout);
    }
}
